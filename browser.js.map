{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/utils-native-class/node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/symbol-ctor/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/main.js","../node_modules/@stdlib/number-ctor/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/integer.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-integer/lib/object.js","../node_modules/@stdlib/assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-null/lib/main.js","../node_modules/@stdlib/assert-is-undefined/lib/main.js","../node_modules/@stdlib/slice-ctor/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/index.js","../node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/slice-multi/lib/main.js","../node_modules/@stdlib/assert-is-slice/lib/main.js","../node_modules/@stdlib/slice-base-args2multislice/lib/main.js","../node_modules/@stdlib/slice-base-int2slice/lib/main.js","../node_modules/@stdlib/slice-base-int2slice/lib/error_out_of_bounds.js","../node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/assert-tools-array-function/lib/main.js","../node_modules/@stdlib/math-base-special-ceil/lib/main.js","../node_modules/@stdlib/slice-base-length/lib/main.js","../node_modules/@stdlib/slice-base-normalize-slice/lib/main.js","../node_modules/@stdlib/slice-base-normalize-slice/lib/error_out_of_bounds.js","../node_modules/@stdlib/slice-base-normalize-multi-slice/lib/main.js","../node_modules/@stdlib/string-base-replace/lib/main.js","../node_modules/@stdlib/string-base-trim/lib/has_builtin.js","../node_modules/@stdlib/string-base-trim/lib/builtin.js","../node_modules/@stdlib/string-base-trim/lib/polyfill.js","../node_modules/@stdlib/string-base-trim/lib/index.js","../node_modules/@stdlib/string-base-trim/lib/check.js","../node_modules/@stdlib/string-base-trim/lib/main.js","../node_modules/@stdlib/slice-base-str2slice/lib/main.js","../node_modules/@stdlib/slice-base-str2multislice/lib/main.js","../node_modules/@stdlib/slice-base-seq2slice/lib/re_end_minus.js","../node_modules/@stdlib/slice-base-seq2slice/lib/re_end_divide.js","../node_modules/@stdlib/slice-base-seq2slice/lib/resolve_end.js","../node_modules/@stdlib/slice-base-seq2slice/lib/re_colon_sep.js","../node_modules/@stdlib/slice-base-seq2slice/lib/re_integer.js","../node_modules/@stdlib/slice-base-seq2slice/lib/re_end.js","../node_modules/@stdlib/slice-base-seq2slice/lib/main.js","../node_modules/@stdlib/slice-base-seq2slice/lib/error_invalid_subsequence.js","../node_modules/@stdlib/slice-base-seq2slice/lib/error_invalid_increment.js","../node_modules/@stdlib/slice-base-seq2slice/lib/error_out_of_bounds.js","../node_modules/@stdlib/slice-base-seq2multislice/lib/re_subseq_sep.js","../node_modules/@stdlib/slice-base-seq2multislice/lib/re_integer.js","../lib/index.js","../node_modules/@stdlib/slice-base-nonreduced-dimensions/lib/main.js","../node_modules/@stdlib/slice-base-reduced-dimensions/lib/main.js","../node_modules/@stdlib/slice-base-sargs2multislice/lib/main.js","../node_modules/@stdlib/slice-base-seq2multislice/lib/main.js","../node_modules/@stdlib/slice-base-seq2multislice/lib/error_out_of_bounds.js","../node_modules/@stdlib/slice-base-seq2multislice/lib/error_invalid_ellipsis.js","../node_modules/@stdlib/slice-base-seq2multislice/lib/error_insufficient_dimensions.js","../node_modules/@stdlib/slice-base-seq2multislice/lib/error_too_many_dimensions.js","../node_modules/@stdlib/slice-base-shape/lib/main.js","../node_modules/@stdlib/slice-base-slice2seq/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor ) );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property';\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js';\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only accessor.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Function} getter - accessor\n*\n* @example\n* function getter() {\n*     return 'bar';\n* }\n*\n* var obj = {};\n*\n* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnlyAccessor( obj, prop, getter ) { // eslint-disable-line id-length\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'get': getter\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnlyAccessor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support';\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar Sym = ( typeof Symbol === 'function' ) ? Symbol : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Sym;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Symbol from '@stdlib/symbol-ctor';\n\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class';\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( hasToStringTag() ) {\n\tmain = polyfill;\n} else {\n\tmain = builtin;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport toStringTag from './tostringtag.js';\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Number from '@stdlib/number-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* import isNumber from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isInt from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a number primitive is an integer value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a number primitive is an integer value\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tvalue < PINF &&\n\t\tvalue > NINF &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having an integer value\n*\n* @example\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having an integer value\n*\n* @example\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an integer\n*\n* @example\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isInteger( null );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is `null`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is null\n*\n* @example\n* var bool = isNull( null );\n* // returns true\n*\n* bool = isNull( true );\n* // returns false\n*/\nfunction isNull( value ) {\n\treturn value === null;\n}\n\n\n// EXPORTS //\n\nexport default isNull;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is `undefined`.\n*\n* ## Notes\n*\n* -   In older browsers, `undefined` is a global which can be overridden. `void`, however, is an operator which **cannot** be overridden. Consequently, better to use `void` to check for `undefined`. See [Stack Overflow][1].\n*\n* [1]: http://stackoverflow.com/a/19369078/2225624\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is undefined\n*\n* @example\n* var bool = isUndefined( undefined );\n* // returns true\n*\n* bool = isUndefined( null );\n* // returns false\n*/\nfunction isUndefined( value ) {\n\treturn value === void 0;\n}\n\n\n// EXPORTS //\n\nexport default isUndefined;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isNull from '@stdlib/assert-is-null';\nimport isUndefined from '@stdlib/assert-is-undefined';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an input argument is valid.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether the argument is valid\n*\n* @example\n* var bool = isValid( 3 );\n* // returns true\n*\n* bool = isValid( null );\n* // returns true\n*\n* bool = isValid( void 0 );\n* // returns true\n*\n* bool = isValid( '3' );\n* // returns false\n*/\nfunction isValid( value ) {\n\treturn ( isInteger( value ) || isNull( value ) || isUndefined( value ) );\n}\n\n\n// MAIN //\n\n/**\n* Slice constructor.\n*\n* @constructor\n* @param {(integer|null|void)} [start] - starting index (inclusive)\n* @param {(integer|null|void)} stop - ending index (exclusive)\n* @param {(integer|null|void)} [step] - index increment\n* @throws {TypeError} first argument must be an integer, null, or undefined\n* @throws {TypeError} second argument must be an integer, null, or undefined\n* @throws {TypeError} third argument must be an integer, null, or undefined\n* @throws {RangeError} third argument cannot be zero\n* @returns {Slice} Slice instance\n*\n* @example\n* var s = new Slice( 10 );\n* // returns <Slice>\n*\n* var start = s.start;\n* // returns null\n*\n* var stop = s.stop;\n* // returns 10\n*\n* var step = s.step;\n* // returns null\n*\n* @example\n* var s = new Slice( 3, 10 );\n* // returns <Slice>\n*\n* var start = s.start;\n* // returns 3\n*\n* var stop = s.stop;\n* // returns 10\n*\n* var step = s.step;\n* // returns null\n*\n* @example\n* var s = new Slice( 3, 10, 2 );\n* // returns <Slice>\n*\n* var start = s.start;\n* // returns 3\n*\n* var stop = s.stop;\n* // returns 10\n*\n* var step = s.step;\n* // returns 2\n*/\nfunction Slice() {\n\tvar nargs;\n\tvar start;\n\tvar stop;\n\tvar step;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\tstart = null;\n\t\tstop = null;\n\t\tstep = null;\n\t} else if ( nargs === 1 ) {\n\t\tstart = null;\n\t\tstop = arguments[ 0 ];\n\t\tstep = null;\n\t} else if ( nargs === 2 ) {\n\t\tstart = arguments[ 0 ];\n\t\tstop = arguments[ 1 ];\n\t\tstep = null;\n\t} else {\n\t\tstart = arguments[ 0 ];\n\t\tstop = arguments[ 1 ];\n\t\tstep = arguments[ 2 ];\n\t}\n\tif ( !( this instanceof Slice ) ) {\n\t\treturn new Slice( start, stop, step );\n\t}\n\tif ( !isValid( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer, null, or undefined. Value: `%s`.', start ) );\n\t}\n\tif ( !isValid( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer, null, or undefined. Value: `%s`.', stop ) );\n\t}\n\tif ( !isValid( step ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer, null, or undefined. Value: `%s`.', step ) );\n\t} else if ( step === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument cannot be zero. Value: `%s`.', step ) );\n\t}\n\tthis._start = ( start === void 0 ) ? null : start;\n\tthis._stop = ( stop === void 0 ) ? null : stop;\n\tthis._step = ( step === void 0 ) ? null : step;\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof Slice\n* @readonly\n* @type {string}\n* @default 'Slice'\n*\n* @example\n* var str = Slice.name;\n* // returns 'Slice'\n*/\nsetReadOnly( Slice, 'name', 'Slice' );\n\n/**\n* Returns the slice's starting index.\n*\n* @name start\n* @memberof Slice.prototype\n* @readonly\n* @type {(integer|null)}\n*\n* @example\n* var s = new Slice( 10 );\n* // returns <Slice>\n*\n* var start = s.start;\n* // returns null\n*\n* @example\n* var s = new Slice( 3, 10 );\n* // returns <Slice>\n*\n* var start = s.start;\n* // returns 3\n*\n* @example\n* var s = new Slice( 3, 10, 2 );\n* // returns <Slice>\n*\n* var start = s.start;\n* // returns 3\n*/\nsetReadOnlyAccessor( Slice.prototype, 'start', function get() {\n\treturn this._start;\n});\n\n/**\n* Returns the slice's ending index.\n*\n* @name stop\n* @memberof Slice.prototype\n* @readonly\n* @type {(integer|null)}\n*\n* @example\n* var s = new Slice( 10 );\n* // returns <Slice>\n*\n* var stop = s.stop;\n* // returns 10\n*\n* @example\n* var s = new Slice( 3, 10 );\n* // returns <Slice>\n*\n* var stop = s.stop;\n* // returns 10\n*\n* @example\n* var s = new Slice( 3, 10, 2 );\n* // returns <Slice>\n*\n* var stop = s.stop;\n* // returns 10\n*/\nsetReadOnlyAccessor( Slice.prototype, 'stop', function get() {\n\treturn this._stop;\n});\n\n/**\n* Returns the slice's index increment.\n*\n* @name step\n* @memberof Slice.prototype\n* @readonly\n* @type {(integer|null)}\n*\n* @example\n* var s = new Slice( 10 );\n* // returns <Slice>\n*\n* var step = s.step;\n* // returns null\n*\n* @example\n* var s = new Slice( 3, 10 );\n* // returns <Slice>\n*\n* var step = s.step;\n* // returns null\n*\n* @example\n* var s = new Slice( 3, 10, 2 );\n* // returns <Slice>\n*\n* var step = s.step;\n* // returns 2\n*/\nsetReadOnlyAccessor( Slice.prototype, 'step', function get() {\n\treturn this._step;\n});\n\n/**\n* Serializes a slice to a string.\n*\n* @name toString\n* @memberof Slice.prototype\n* @type {Function}\n* @returns {string} serialized Slice\n*\n* @example\n* var s = new Slice( 10 );\n* // returns <Slice>\n*\n* var str = s.toString();\n* // returns 'Slice(null,10,null)'\n*\n* @example\n* var s = new Slice( 3, 10 );\n* // returns <Slice>\n*\n* var str = s.toString();\n* // returns 'Slice(3,10,null)'\n*\n* @example\n* var s = new Slice( 3, 10, 2 );\n* // returns <Slice>\n*\n* var str = s.toString();\n* // returns 'Slice(3,10,2)'\n*/\nsetReadOnly( Slice.prototype, 'toString', function toString() {\n\treturn 'Slice('+this._start+','+this._stop+','+this.step+')';\n});\n\n/**\n* Serializes a slice as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Slice` instance.\n*\n* @name toJSON\n* @memberof Slice.prototype\n* @type {Function}\n* @returns {Object} serialized Slice\n*\n* @example\n* var s = new Slice( 10 );\n* // returns <Slice>\n*\n* var o = s.toJSON();\n* // returns { 'type': 'Slice', 'data': [ null, 10, null ] }\n*\n* @example\n* var s = new Slice( 3, 10 );\n* // returns <Slice>\n*\n* var o = s.toJSON();\n* // returns { 'type': 'Slice', 'data': [ 3, 10, null ] }\n*\n* @example\n* var s = new Slice( 3, 10, 2 );\n* // returns <Slice>\n*\n* var o = s.toJSON();\n* // returns { 'type': 'Slice', 'data': [ 3, 10, 2 ] }\n*/\nsetReadOnly( Slice.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'type': 'Slice',\n\t\t'data': [\n\t\t\tthis._start,\n\t\t\tthis._stop,\n\t\t\tthis._step\n\t\t]\n\t};\n});\n\n\n// EXPORTS //\n\nexport default Slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an integer.\n*\n* @module @stdlib/assert-is-integer\n*\n* @example\n* import isInteger from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isInteger( -3.14 );\n* // returns false\n*\n* bool = isInteger( null );\n* // returns false\n*\n* @example\n* // Use interface to check for integer primitives...\n* import { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* // Use interface to check for integer objects...\n* import { isObject as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reFunctionName from './main.js';\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nexport default RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* import reFunctionName from '@stdlib/regexp-function-name';\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport REGEXP from './regexp.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport { REGEXP as RE } from '@stdlib/regexp-function-name';\nimport isBuffer from '@stdlib/assert-is-buffer';\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nexport default constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isNull from '@stdlib/assert-is-null';\nimport isUndefined from '@stdlib/assert-is-undefined';\nimport isSlice from '@stdlib/assert-is-slice';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an input argument is valid.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether the argument is valid\n*\n* @example\n* var bool = isValid( 3 );\n* // returns true\n*\n* bool = isValid( null );\n* // returns true\n*\n* bool = isValid( void 0 );\n* // returns true\n*\n* bool = isValid( '3' );\n* // returns false\n*/\nfunction isValid( value ) {\n\treturn (\n\t\tisInteger( value ) ||\n\t\tisNull( value ) ||\n\t\tisUndefined( value ) ||\n\t\tisSlice( value )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Multi-slice constructor.\n*\n* @constructor\n* @param {...(Slice|integer|null)} slice - slice\n* @throws {TypeError} a provided argument must be either a Slice, integer, null, or undefined\n* @returns {MultiSlice} MultiSlice instance\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*/\nfunction MultiSlice() {\n\tvar nargs;\n\tvar proxy;\n\tvar args;\n\tvar v;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof MultiSlice ) ) {\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ] );\n\t\t}\n\t\tif ( nargs === 3 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( nargs === 4 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ], arguments[ 3 ] ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( nargs === 5 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ], arguments[ 3 ], arguments[ 4 ] ); // eslint-disable-line max-len\n\t\t}\n\t\targs = [];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\t// Use a workaround for being unable to combine `.apply` with the `new` operator:\n\t\tproxy = Object.create( MultiSlice.prototype );\n\t\treturn MultiSlice.apply( proxy, args );\n\t}\n\tthis._data = [];\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( !isValid( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Provided arguments must be either a Slice, integer, null, or undefined. Argument: `%d`. Value: `%s`.', i, String( v ) ) );\n\t\t}\n\t\tthis._data.push( ( v === void 0 ) ? null : v );\n\t}\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof MultiSlice\n* @readonly\n* @type {string}\n* @default 'MultiSlice'\n*\n* @example\n* var str = MultiSlice.name;\n* // returns 'MultiSlice'\n*/\nsetReadOnly( MultiSlice, 'name', 'MultiSlice' );\n\n/**\n* Returns the number of slice dimensions.\n*\n* @name ndims\n* @memberof MultiSlice.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var ndims = ms.ndims;\n* // returns 4\n*/\nsetReadOnlyAccessor( MultiSlice.prototype, 'ndims', function get() {\n\treturn this._data.length;\n});\n\n/**\n* Returns multi-slice data.\n*\n* @name data\n* @memberof MultiSlice.prototype\n* @readonly\n* @type {Array<Slice|null|integer>}\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var data = ms.data;\n* // returns [...]\n*\n* var v = data[ 0 ];\n* // returns null\n*\n* v = data[ 1 ];\n* // returns <Slice>\n*\n* v = data[ 2 ];\n* // returns <Slice>\n*\n* v = data[ 3 ];\n* // returns 2\n*/\nsetReadOnlyAccessor( MultiSlice.prototype, 'data', function get() {\n\treturn this._data.slice();\n});\n\n/**\n* Serializes a multi-slice to a string.\n*\n* @name toString\n* @memberof MultiSlice.prototype\n* @type {Function}\n* @returns {string} serialized MultiSlice\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var str = ms.toString();\n* // returns 'MultiSlice(null,Slice(0,10,1),Slice(2,12,2),2)'\n*/\nsetReadOnly( MultiSlice.prototype, 'toString', function toString() {\n\tvar data;\n\tvar out;\n\tvar i;\n\n\tdata = this._data;\n\tout = [];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tout.push( String( data[ i ] ) );\n\t}\n\treturn 'MultiSlice('+out.join( ',' )+')';\n});\n\n/**\n* Serializes a multi-slice as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `MultiSlice` instance.\n*\n* @name toJSON\n* @memberof MultiSlice.prototype\n* @type {Function}\n* @returns {Object} serialized MultiSlice\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var o = ms.toJSON();\n* // returns { 'type': 'MultiSlice', 'data': [ null, { 'type': 'Slice', 'data': [ 0, 10, 1 ] }, { 'type': 'Slice', 'data': [ 2, 12, 2 ] }, 2 ] }\n*/\nsetReadOnly( MultiSlice.prototype, 'toJSON', function toJSON() {\n\tvar data;\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tdata = this._data;\n\tout = {\n\t\t'type': 'MultiSlice',\n\t\t'data': []\n\t};\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tv = data[ i ];\n\t\tout.data.push( ( v && typeof v.toJSON === 'function' ) ? v.toJSON() : v );\n\t}\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default MultiSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Slice from '@stdlib/slice-ctor';\nimport constructorName from '@stdlib/utils-constructor-name';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Slice object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a Slice object\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = new Slice( 0, 10, 2 );\n*\n* var bool = isSlice( s );\n* // returns true\n*/\nfunction isSlice( value ) {\n\treturn (\n\t\tvalue instanceof Slice ||\n\t\tconstructorName( value ) === 'Slice'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport MultiSlice from '@stdlib/slice-multi';\n\n\n// MAIN //\n\n/**\n* Creates a MultiSlice object from a list of MultiSlice constructor arguments.\n*\n* @param {(Slice|integer|null|void)} args - constructor arguments\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = args2multislice( [ void 0, new Slice( 0, 10, 1 ) ] );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ null, <Slice> ]\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = args2multislice( [ new Slice( 0, 10, 1 ), void 0 ] );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ <Slice>, null ]\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = args2multislice( [ new Slice( 0, 10, 1 ), void 0, void 0, new Slice( 0, 10, 1 ) ] );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ <Slice>, null, null, <Slice> ]\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = args2multislice( [ void 0, new Slice( 0, 10, 1 ), null,  void 0, new Slice( 2, 9, 2 ), null, void 0 ] );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ null, <Slice>, null, null, <Slice>, null, null ]\n*/\nfunction args2multislice( args ) {\n\tswitch ( args.length ) {\n\tcase 0:\n\t\treturn new MultiSlice();\n\tcase 1:\n\t\treturn new MultiSlice( args[ 0 ] );\n\tcase 2:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ] );\n\tcase 3:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ] );\n\tcase 4:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ] );\n\tcase 5:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ], args[ 4 ] );\n\tcase 6:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ], args[ 4 ], args[ 5 ] );\n\tcase 7:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ], args[ 4 ], args[ 5 ], args[ 6 ] );\n\tcase 8:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ], args[ 4 ], args[ 5 ], args[ 6 ], args[ 7 ] );\n\tcase 9:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ], args[ 4 ], args[ 5 ], args[ 6 ], args[ 7 ], args[ 8 ] );\n\tcase 10:\n\t\treturn new MultiSlice( args[ 0 ], args[ 1 ], args[ 2 ], args[ 3 ], args[ 4 ], args[ 5 ], args[ 6 ], args[ 7 ], args[ 8 ], args[ 9 ] );\n\tdefault:\n\t\treturn MultiSlice.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default args2multislice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Slice from '@stdlib/slice-ctor';\nimport eOutOfBounds from './error_out_of_bounds.js';\n\n\n// MAIN //\n\n/**\n* Converts an integer to a Slice object.\n*\n* @param {integer} value - input value\n* @param {NonNegativeInteger} max - index upper bound\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {(Slice|Object)} Slice object or an error object\n*\n* @example\n* var s = int2slice( -4, 10, false );\n* // returns <Slice>\n*\n* var start = s.start;\n* // returns 6\n*\n* var stop = s.stop;\n* // returns 7\n*\n* var step = s.step;\n* // returns 1\n*/\nfunction int2slice( value, max, strict ) {\n\t// If a value exceeds the last possible index, create an \"empty\" slice...\n\tif ( value >= max ) {\n\t\tif ( strict ) {\n\t\t\treturn eOutOfBounds();\n\t\t}\n\t\treturn new Slice( max, max, 1 );\n\t}\n\t// Check whether we need to resolve a slice relative to the last possible index...\n\tif ( value < 0 ) {\n\t\tvalue = max + value;\n\n\t\t// If a value exceeds the first index, create an \"empty\" slice...\n\t\tif ( value < 0 ) {\n\t\t\tif ( strict ) {\n\t\t\t\treturn eOutOfBounds();\n\t\t\t}\n\t\t\treturn new Slice( 0, 0, 1 );\n\t\t}\n\t\treturn new Slice( value, value+1, 1 ); // e.g., Slice( 2, 3, 1 ), which is the slice equivalent of only selecting the second row\n\t}\n\t// 0 <= s < N\n\treturn new Slice( value, value+1, 1 );\n}\n\n\n// EXPORTS //\n\nexport default int2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a slice which exceeds index bounds.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_OUT_OF_BOUNDS'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* import isObjectLike from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* import { isObjectLikeArray as isObjectLike } from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-function';\nimport main from './main.js';\n\n\n// VARIABLES //\n\nvar isObjectLikeArray = arrayfun( main );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isObjectLikeArray', isObjectLikeArray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceil( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceil( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceil( NaN );\n* // returns NaN\n*/\nvar ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default ceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// MAIN //\n\n/**\n* Returns the number of elements in a normalized slice.\n*\n* @param {Slice} slice - normalized Slice object\n* @returns {NonNegativeInteger} number of elements\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import normalizeSlice from '@stdlib/slice-base-normalize-slice';\n*\n* var s = new Slice( 2, null, 1 );\n* // returns <Slice>\n*\n* var v = sliceLength( normalizeSlice( s, 10, false ) );\n* // returns 8\n*\n* v = sliceLength( normalizeSlice( s, 11, false ) );\n* // returns 9\n*\n* v = sliceLength( normalizeSlice( s, 5, false ) );\n* // returns 3\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import normalizeSlice from '@stdlib/slice-base-normalize-slice';\n*\n* var s = new Slice( 2, null, 2 );\n* // returns <Slice>\n*\n* var v = sliceLength( normalizeSlice( s, 10, false ) );\n* // returns 4\n*\n* v = sliceLength( normalizeSlice( s, 11, false ) );\n* // returns 5\n*\n* v = sliceLength( normalizeSlice( s, 5, false ) );\n* // returns 2\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import normalizeSlice from '@stdlib/slice-base-normalize-slice';\n*\n* var s = new Slice( -1, null, -2 );\n*\n* var v = sliceLength( normalizeSlice( s, 10, false ) );\n* // returns 5\n*\n* v = sliceLength( normalizeSlice( s, 11, false ) );\n* // returns 6\n*\n* v = sliceLength( normalizeSlice( s, 5, false ) );\n* // returns 3\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import normalizeSlice from '@stdlib/slice-base-normalize-slice';\n*\n* var s = new Slice( 3, 5, -1 );\n*\n* var v = sliceLength( normalizeSlice( s, 10, false ) );\n* // returns 0\n*\n* v = sliceLength( normalizeSlice( s, 11, false ) );\n* // returns 0\n*\n* v = sliceLength( normalizeSlice( s, 5, false ) );\n* // returns 0\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import normalizeSlice from '@stdlib/slice-base-normalize-slice';\n*\n* var s = new Slice( 5, 3, 1 );\n*\n* var v = sliceLength( normalizeSlice( s, 10, false ) );\n* // returns 0\n*\n* v = sliceLength( normalizeSlice( s, 11, false ) );\n* // returns 0\n*\n* v = sliceLength( normalizeSlice( s, 5, false ) );\n* // returns 0\n*/\nfunction sliceLength( slice ) {\n\tvar inc;\n\tvar x1;\n\tvar x2;\n\n\tx1 = slice.start;\n\tx2 = slice.stop;\n\tinc = slice.step;\n\n\t// For a normalized slice, stop should only be `null` when the increment is negative...\n\tif ( x2 === null ) {\n\t\tx2 = -1; // set to -1 to ensure that the first element is included\n\t}\n\tif (\n\t\t// If the increment is positive, the slice is empty whenever the starting index is greater than or equal to the stopping index:\n\t\t( inc > 0 && x1 >= x2 ) ||\n\n\t\t// If the increment is negative, the slice is empty whenever the starting index is less than or equal to the stopping index:\n\t\t( inc < 0 && x1 <= x2 )\n\t) {\n\t\treturn 0;\n\t}\n\treturn ceil( ( x2 - x1 ) / inc );\n}\n\n\n// EXPORTS //\n\nexport default sliceLength;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Slice from '@stdlib/slice-ctor';\nimport eOutOfBounds from './error_out_of_bounds.js';\n\n\n// MAIN //\n\n/**\n* Returns a normalized Slice object.\n*\n* @param {Slice} slice - input slice\n* @param {NonNegativeInteger} len - maximum number of elements allowed in a slice\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {(Slice|ErrorObject)} slice object or an error object\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = normalizeSlice( new Slice(), 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = normalizeSlice( new Slice( null, 20, 2 ), 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 2\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = normalizeSlice( new Slice( -5, -1, 1 ), 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 5\n*\n* v = s.stop;\n* // returns 9\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = normalizeSlice( new Slice( -5, null, -1 ), 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 5\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*/\nfunction normalizeSlice( slice, len, strict ) {\n\tvar start;\n\tvar stop;\n\tvar step;\n\n\tstart = slice.start;\n\tstop = slice.stop;\n\tstep = slice.step;\n\n\t// If necessary, set the default increment...\n\tif ( step === null ) {\n\t\tstep = 1;\n\t}\n\n\t// Case: start is not specified\n\tif ( start === null ) {\n\t\t// If the step is positive, we default to the first index...\n\t\tif ( step > 0 ) {\n\t\t\tstart = 0;\n\t\t}\n\t\t// If the step is negative, we default to the last index (inclusive)...\n\t\telse {\n\t\t\tstart = len - 1;\n\t\t}\n\t}\n\t// Case: start is negative and should be resolved relative to the last index\n\telse if ( start < 0 ) {\n\t\tstart = len + start;\n\n\t\t// Check whether start still exceeds the index bounds...\n\t\tif ( start < 0 ) {\n\t\t\tif ( strict ) {\n\t\t\t\treturn eOutOfBounds();\n\t\t\t}\n\t\t\t// Clamp to the first index (inclusive):\n\t\t\tstart = 0;\n\t\t}\n\t}\n\t// Case: start exceeds index bounds\n\telse if ( start >= len ) {\n\t\tif ( strict ) {\n\t\t\treturn eOutOfBounds();\n\t\t}\n\t\t// If the increment is negative, clamp to the last index (inclusive)...\n\t\tif ( step < 0 ) {\n\t\t\tstart = len - 1;\n\t\t}\n\t\t// If the increment is positive, clamp to the \"index\" following the last index...\n\t\telse {\n\t\t\tstart = len;\n\t\t}\n\t}\n\n\t// Case: stop is not specified\n\tif ( stop === null ) {\n\t\t// If the step is positive, we default to just beyond the last index, as the stopping index is exclusive...\n\t\tif ( step > 0 ) {\n\t\t\tstop = len;\n\t\t}\n\t\t// If the step is negative, we default to a sentinel value indicating that one should iterate through the first index when decrementing...\n\t\telse {\n\t\t\tstop = null;\n\t\t}\n\t}\n\t// Case: stop is negative and should be resolved relative to the last index\n\telse if ( stop < 0 ) {\n\t\tstop = len + stop;\n\n\t\t// Check whether stop still exceeds the index bounds...\n\t\tif ( stop < 0 ) {\n\t\t\t// If the step is positive, we should clamp to the first index, as Slice(x,0,step) is an empty slice regardless of `x`...\n\t\t\tif ( step > 0 ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t}\n\t\t\t\tstop = 0;\n\t\t\t}\n\t\t\t// If the step is negative, we default to just beyond the first index (using a sentinel value), as the stopping index is exclusive, thus indicating to iterate through the first index when decrementing...\n\t\t\telse {\n\t\t\t\tif ( strict && stop < -1 ) {\n\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t}\n\t\t\t\tstop = null;\n\t\t\t}\n\t\t}\n\t}\n\t// Case: stop exceeds index bounds\n\telse if ( stop > len ) {\n\t\tif ( strict ) {\n\t\t\treturn eOutOfBounds();\n\t\t}\n\t\t// Clamp to just beyond the last index, as the stopping index is exclusive:\n\t\tstop = len;\n\t}\n\n\t// Return a normalized slice:\n\treturn new Slice( start, stop, step );\n}\n\n\n// EXPORTS //\n\nexport default normalizeSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a slice which exceeds index bounds.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_OUT_OF_BOUNDS'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nimport Slice from '@stdlib/slice-ctor';\nimport normalizeSlice from '@stdlib/slice-base-normalize-slice';\nimport int2slice from '@stdlib/slice-base-int2slice';\n\n\n// FUNCTIONS //\n\n/**\n* Normalizes an individual MultiSlice element.\n*\n* @private\n* @param {(Slice|integer|null)} value - input slice\n* @param {NonNegativeInteger} len - maximum number of elements which are allowed in a slice\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {Slice} slice object\n*/\nfunction normalize( value, len, strict ) {\n\t// Case: null\n\tif ( value === null ) {\n\t\t// Create a slice with default extents and a default increment:\n\t\treturn new Slice( 0, len, 1 );\n\t}\n\t// Case: integer\n\tif ( typeof value === 'number' ) {\n\t\treturn int2slice( value, len, strict );\n\t}\n\t// Case: slice\n\treturn normalizeSlice( value, len, strict );\n}\n\n\n// MAIN //\n\n/**\n* Returns a normalized MultiSlice object.\n*\n* @param {MultiSlice} slice - input slice\n* @param {NonNegativeIntegerArray} shape - maximum allowed slice shape\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {(MultiSlice|ErrorObject)} multi-slice object or an error object\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n*\n* var shape = [ 10, 10, 10 ];\n*\n* var s1 = new MultiSlice( new Slice( 2, null, 2 ), null, -4 );\n* var s2 = normalizeMultiSlice( s1, shape, false );\n* // returns <MultiSlice>\n*\n* var d = s2.data;\n* // returns [ <Slice>, <Slice>, <Slice> ]\n*\n* var v = d[ 0 ];\n* // returns <Slice>\n*\n* var start = v.start;\n* // returns 2\n*\n* var stop = v.stop;\n* // returns 10\n*\n* var step = v.step;\n* // returns 2\n*\n* v = d[ 1 ];\n* // returns <Slice>\n*\n* start = v.start;\n* // returns 0\n*\n* stop = v.stop;\n* // returns 10\n*\n* step = v.step;\n* // returns 1\n*\n* v = d[ 2 ];\n* // returns <Slice>\n*\n* start = v.start;\n* // returns 6\n*\n* stop = v.stop;\n* // returns 7\n*\n* step = v.step;\n* // returns 1\n*/\nfunction normalizeMultiSlice( slice, shape, strict ) {\n\tvar data;\n\tvar args;\n\tvar s;\n\tvar i;\n\n\tdata = slice.data;\n\targs = [];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\ts = normalize( data[ i ], shape[ i ], strict );\n\t\tif ( s.code !== void 0 ) {\n\t\t\treturn s;\n\t\t}\n\t\targs.push( s );\n\t}\n\n\t// Return a normalized slice:\n\treturn args2multislice( args );\n}\n\n\n// EXPORTS //\n\nexport default normalizeMultiSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Replaces search occurrences with a replacement string.\n*\n* @param {string} str - input string\n* @param {RegExp} search - search expression\n* @param {(string|Function)} newval - replacement value or function\n* @returns {string} new string containing replacement(s)\n*\n* @example\n* var str = 'Hello World';\n* var out = replace( str, /world/i, 'Mr. President' );\n* // returns 'Hello Mr. President'\n*\n* @example\n* import capitalize from '@stdlib/string-base-capitalize';\n*\n* var str = 'Oranges and lemons say the bells of St. Clement\\'s';\n*\n* function replacer( match, p1 ) {\n*     return capitalize( p1 );\n* }\n*\n* var out = replace( str, /([^\\s]*)/gi, replacer);\n* // returns 'Oranges And Lemons Say The Bells Of St. Clement\\'s'\n*/\nfunction replace( str, search, newval ) {\n\treturn str.replace( search, newval );\n}\n\n\n// EXPORTS //\n\nexport default replace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof String.prototype.trim !== 'undefined' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar trim = String.prototype.trim;\n\n\n// EXPORTS //\n\nexport default trim;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-base-replace';\n\n\n// VARIABLES //\n\n// The following regular expression should suffice to polyfill (most?) all environments.\nvar RE = /^[\\u0020\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]*([\\S\\s]*?)[\\u0020\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]*$/;\n\n\n// MAIN //\n\n/**\n* Trims whitespace characters from the beginning and end of a string.\n*\n* @private\n* @param {string} str - input string\n* @returns {string} trimmed string\n*\n* @example\n* var out = trim( '   Whitespace   ' );\n* // returns 'Whitespace'\n*\n* @example\n* var out = trim( '\\t\\t\\tTabs\\t\\t\\t' );\n* // returns 'Tabs'\n*\n* @example\n* var out = trim( '\\n\\n\\nNew Lines\\n\\n\\n' );\n* // returns 'New Lines'\n*/\nfunction trim( str ) {\n\treturn replace( str, RE, '$1' );\n}\n\n\n// EXPORTS //\n\nexport default trim;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Trim whitespace characters from the beginning and end of a string.\n*\n* @module @stdlib/string-base-trim\n*\n* @example\n* import trim from '@stdlib/string-base-trim';\n*\n* var out = trim( '   Whitespace   ' );\n* // returns 'Whitespace'\n*\n* out = trim( '\\t\\t\\tTabs\\t\\t\\t' );\n* // returns 'Tabs'\n*\n* out = trim( '\\n\\n\\nNew Lines\\n\\n\\n' );\n* // returns 'New Lines'\n*/\n\n// MODULES //\n\nimport HAS_BUILTIN from './has_builtin.js';\nimport check from './check.js';\nimport polyfill from './polyfill.js';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar trim;\nif ( HAS_BUILTIN && check() ) {\n\ttrim = main;\n} else {\n\ttrim = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default trim;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from './builtin.js';\n\n\n// VARIABLES //\n\nvar str1 = ' \\n\\t\\r\\n\\f\\v\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nvar str2 = '\\u180e';\n\n\n// MAIN //\n\n/**\n* Tests the built-in `String.prototype.trim()` implementation when provided whitespace.\n*\n* ## Notes\n*\n* -   For context, see <https://github.com/stdlib-js/stdlib/commit/c3d6458aa08bbd4bd6bf13e3643422f3b2a65dd9>. In short, we can only rely on the built-in `trim` method when it does not consider the Mongolian space separator as whitespace.\n*\n* @private\n* @returns {boolean} boolean indicating whether the built-in implementation returns the expected value\n*\n* @example\n* var b = test();\n* // returns <boolean>\n*/\nfunction test() {\n\treturn ( trim.call( str1 ) === '' ) && ( trim.call( str2 ) === str2 );\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport builtin from './builtin.js';\n\n\n// MAIN //\n\n/**\n* Trims whitespace characters from the beginning and end of a string.\n*\n* @param {string} str - input string\n* @returns {string} trimmed string\n*\n* @example\n* var out = trim( '   Whitespace   ' );\n* // returns 'Whitespace'\n*\n* @example\n* var out = trim( '\\t\\t\\tTabs\\t\\t\\t' );\n* // returns 'Tabs'\n*\n* @example\n* var out = trim( '\\n\\n\\nNew Lines\\n\\n\\n' );\n* // returns 'New Lines'\n*/\nfunction trim( str ) {\n\treturn builtin.call( str );\n}\n\n\n// EXPORTS //\n\nexport default trim;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport Slice from '@stdlib/slice-ctor';\n\n\n// VARIABLES //\n\nvar PREFIX = 'Slice(';\nvar NARGS = 3;\n\n/**\n* Regular expression matching the slice argument separator.\n*\n* @private\n* @name RE_SEP\n* @type {RegExp}\n*/\nvar RE_SEP = /\\s*,\\s*/;\n\n/**\n* Regular expression matching an integer value.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// MAIN //\n\n/**\n* Parses a string-serialized Slice object.\n*\n* ## Notes\n*\n* -   The function returns `null` if provided an invalid string.\n*\n* @param {string} str - input string\n* @returns {(Slice|null)} Slice object (or null)\n*\n* @example\n* var s = str2slice( 'Slice(null,null,null)' );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns null\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns null\n*\n* @example\n* var s = str2slice( 'Slice(0,10,1)' );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = str2slice( 'Slice(foo,bar)' );\n* // returns null\n*/\nfunction str2slice( str ) {\n\tvar args;\n\tvar arg;\n\tvar n;\n\tvar v;\n\tvar i;\n\tif ( str.substring( 0, PREFIX.length ) !== PREFIX ) {\n\t\treturn null;\n\t}\n\tn = str.length - 1;\n\tif ( str[ n ] !== ')' ) {\n\t\treturn null;\n\t}\n\tstr = trim( str.substring( PREFIX.length, n ) );\n\tstr = str.split( RE_SEP );\n\tif ( str.length !== NARGS ) {\n\t\treturn null;\n\t}\n\targs = [];\n\tfor ( i = 0; i < NARGS; i++ ) {\n\t\tv = str[ i ];\n\t\tif ( v === 'null' ) {\n\t\t\targ = null;\n\t\t} else if ( RE_INTEGER.test( v ) ) {\n\t\t\targ = parseInt( v, 10 );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\targs.push( arg );\n\t}\n\treturn new Slice( args[ 0 ], args[ 1 ], args[ 2 ] );\n}\n\n\n// EXPORTS //\n\nexport default str2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport MultiSlice from '@stdlib/slice-multi';\nimport args2multislice from '@stdlib/slice-base-args2multislice';\n\n\n// VARIABLES //\n\nvar PREFIX = 'MultiSlice(';\n\n/**\n* Regular expression matching the argument separator.\n*\n* @private\n* @name RE_SEP\n* @type {RegExp}\n*/\nvar RE_SEP = /\\s*,\\s*/;\n\n/**\n* Regular expression matching an integer value.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// MAIN //\n\n/**\n* Parses a string-serialized MultiSlice object.\n*\n* ## Notes\n*\n* -   The function returns `null` if provided an invalid string.\n*\n* @param {string} str - input string\n* @returns {(MultiSlice|null)} MultiSlice object (or null)\n*\n* @example\n* var s = str2multislice( 'MultiSlice(null,null,null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ null, null, null ]\n*\n* @example\n* var s = str2multislice( 'MultiSlice(10,Slice(0,10,1),null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ 10, <Slice>, null ]\n*\n* @example\n* var s = str2multislice( 'MultiSlice(foo,bar)' );\n* // returns null\n*/\nfunction str2multislice( str ) {\n\tvar args;\n\tvar arg;\n\tvar n;\n\tvar v;\n\tvar i;\n\tif ( str.substring( 0, PREFIX.length ) !== PREFIX ) {\n\t\treturn null;\n\t}\n\tn = str.length - 1;\n\tif ( str[ n ] !== ')' ) {\n\t\treturn null;\n\t}\n\tstr = trim( str.substring( PREFIX.length, n ) );\n\tstr = str.split( RE_SEP );\n\tn = str.length;\n\n\t// Check for an empty slice (i.e., `MultiSlice()`)...\n\tif ( n === 1 && str[ 0 ] === '' ) {\n\t\treturn new MultiSlice();\n\t}\n\targs = [];\n\tfor ( i = 0; i < n; i++ ) {\n\t\tv = str[ i ];\n\t\tif ( v[ 0 ] === 'S' ) {\n\t\t\tv = str.slice( i, i+3 ).join( ',' );\n\t\t\targ = str2slice( v );\n\t\t\tif ( arg === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\ti += 2; // skip over the `Slice(...)` arguments\n\t\t} else if ( v === 'null' ) {\n\t\t\targ = null;\n\t\t} else if ( RE_INTEGER.test( v ) ) {\n\t\t\targ = parseInt( v, 10 );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\targs.push( arg );\n\t}\n\treturn args2multislice( args );\n}\n\n\n// EXPORTS //\n\nexport default str2multislice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Matches a subtraction operation following an 'end' character sequence.\n*\n* Regular expression: `/(?:\\s*-\\s*)(?=\\d+)(\\d+)?$/`\n*\n* -   `(?:\\s*-\\s*)`\n*\n*     -   capture but do not remember a minus sign surrounded by any amount of whitespace\n*\n* -   `(?=\\d+)`\n*\n*     -   but only match when the minus sign is followed by one or more digits\n*\n* -   `(\\d+)`\n*\n*     -   capture one or more digits\n*\n* -   `$`\n*\n*     -   end of input\n*\n* @private\n* @name RE_END_MINUS\n* @type {RegExp}\n*\n* @example\n* var m = 'end-2'.match( RE_END_MINUS );\n* // returns [...]\n*\n* var v = m[ 1 ];\n* // returns '2'\n*\n* m = 'end - 2'.match( RE_END_MINUS );\n* // returns [...]\n*\n* v = m[ 1 ];\n* // returns '2'\n*\n* m = 'end - 2.4'.match( RE_END_MINUS );\n* // returns null\n*/\nvar RE_END_MINUS = /(?:\\s*-\\s*)(?=\\d+)(\\d+)$/;\n\n\n// EXPORTS //\n\nexport default RE_END_MINUS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Matches a division operation following an 'end' character sequence.\n*\n* Regular expression: `/(?:\\s*\\/\\s*)(?=\\d*\\.?\\d+)(\\d*\\.?\\d+)?$/`\n*\n* -   `(?:\\s*\\/\\s*)`\n*\n*     -   capture but do not remember a divide sign surrounded by any amount of whitespace\n*\n* -   `(?=\\d*\\.?\\d+)`\n*\n*     -   but only match when the minus divide is followed by one or more digits\n*\n* -   `(\\d*\\.?\\d+)`\n*\n*     -   capture one or more digits\n*\n* -   `$`\n*\n*     -   end of input\n*\n* @private\n* @name RE_END_DIVIDE\n* @type {RegExp}\n*\n* @example\n* var m = 'end/2'.match( RE_END_DIVIDE );\n* // returns [...]\n*\n* var v = m[ 1 ];\n* // returns '2'\n*\n* m = 'end / 2'.match( RE_END_DIVIDE );\n* // returns [...]\n*\n* v = m[ 1 ];\n* // returns '2'\n*\n* m = 'end / 2.4'.match( RE_END_DIVIDE );\n* // returns [...]\n*\n* v = m[ 1 ];\n* // returns '2.4'\n*/\nvar RE_END_DIVIDE = /(?:\\s*\\/\\s*)(?=\\d*\\.?\\d+)(\\d*\\.?\\d+)$/;\n\n\n// EXPORTS //\n\nexport default RE_END_DIVIDE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport RE_END_MINUS from './re_end_minus.js';\nimport RE_END_DIVIDE from './re_end_divide.js';\n\n\n// MAIN //\n\n/**\n* Resolves an \"end\" index.\n*\n* ## Notes\n*\n* -   The function returns `-1` if provided an invalid character sequence.\n* -   The function returns `-2` if the resolved end index is out-of-bounds.\n*\n* @private\n* @param {string} v - character sequence containing the \"end\" keyword\n* @param {NonNegativeInteger} len - maximum number of elements allowed in the slice\n* @param {boolean} decrement - boolean indicating whether a subsequence has a negative decrement\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {NonNegativeInteger} end index (exclusive)\n*\n* @example\n* var idx = resolveEnd( 'end', 10, false, false );\n* // returns 10\n*\n* idx = resolveEnd( 'end', 10, true, false );\n* // returns 10\n*\n* @example\n* var idx = resolveEnd( 'end-1', 10, false, false );\n* // returns 9\n*\n* idx = resolveEnd( 'end-1', 10, true, false );\n* // returns 9\n*\n* @example\n* var idx = resolveEnd( 'end-2', 10, false, false );\n* // returns 8\n*\n* idx = resolveEnd( 'end-2', 10, true, false );\n* // returns 8\n*\n* @example\n* var idx = resolveEnd( 'end/2', 10, false, false );\n* // returns 5\n*\n* idx = resolveEnd( 'end/2', 10, true, false );\n* // returns 4\n*\n* @example\n* var idx = resolveEnd( 'end/2', 11, false, false );\n* // returns 5\n*\n* idx = resolveEnd( 'end/2', 11, true, false );\n* // returns 5\n*\n* @example\n* var idx = resolveEnd( 'end/3', 10, false, false );\n* // returns 3\n*\n* idx = resolveEnd( 'end/3', 10, true, false );\n* // returns 3\n*\n* @example\n* var idx = resolveEnd( 'end/3', 11, false, false );\n* // returns 3\n*\n* idx = resolveEnd( 'end/3', 11, true, false );\n* // returns 3\n*\n* @example\n* var idx = resolveEnd( 'end/4', 10, false, false );\n* // returns 2\n*\n* idx = resolveEnd( 'end/4', 10, true, false );\n* // returns 2\n*\n* @example\n* var idx = resolveEnd( 'end/4', 11, false, false );\n* // returns 2\n*\n* idx = resolveEnd( 'end/4', 11, true, false );\n* // returns 2\n*\n* @example\n* var idx = resolveEnd( 'end/5', 10, false, false );\n* // returns 2\n*\n* idx = resolveEnd( 'end/5', 10, true, false );\n* // returns 1\n*\n* @example\n* var idx = resolveEnd( 'end/5', 11, false, false );\n* // returns 2\n*\n* idx = resolveEnd( 'end/5', 11, true, false );\n* // returns 2\n*\n* @example\n* var idx = resolveEnd( 'end-20', 10, false, false );\n* // returns 0\n*\n* idx = resolveEnd( 'end-20', 10, true, false );\n* // returns 0\n*\n* idx = resolveEnd( 'end-20', 10, true, true );\n* // returns -2\n*\n* @example\n* var idx = resolveEnd( 'end*2', 10, false, false );\n* // returns -1\n*\n* idx = resolveEnd( 'end*2', 10, true, false );\n* // returns -1\n*\n* @example\n* var idx = resolveEnd( 'end+1', 10, false, false );\n* // returns -1\n*\n* idx = resolveEnd( 'end+1', 10, true, false );\n* // returns -1\n*\n* @example\n* var idx = resolveEnd( 'end/0.5', 10, false, false );\n* // returns -1\n*\n* idx = resolveEnd( 'end/0.5', 10, true, false );\n* // returns -1\n*\n* idx = resolveEnd( 'end/0.5', 10, true, true );\n* // returns -2\n*/\nfunction resolveEnd( v, len, decrement, strict ) {\n\tvar tmp;\n\n\t// Check for the simple case where \"end\" refers to the last index (exclusive)...\n\tif ( v === 'end' ) {\n\t\treturn len;\n\t}\n\t// Check for a subtraction operation (e.g., `end-2`)...\n\ttmp = v.match( RE_END_MINUS );\n\tif ( tmp ) {\n\t\tv = len - parseInt( tmp[ 1 ], 10 );\n\n\t\t// If the computed index exceeds the index bounds, clamp to the first index...\n\t\tif ( v < 0 ) {\n\t\t\tif ( strict ) {\n\t\t\t\treturn -2; // return out-of-bounds error code\n\t\t\t}\n\t\t\tv = 0;\n\t\t}\n\t\treturn v;\n\t}\n\t// Check for a division operation (e.g., `end/2`)...\n\ttmp = v.match( RE_END_DIVIDE );\n\tif ( tmp ) {\n\t\tv = parseFloat( tmp[ 1 ] );\n\t\tif ( v < 1.0 ) {\n\t\t\treturn ( strict ) ? -2 : -1; // if `end/x > end`, then need to return out-of-bounds error code\n\t\t}\n\t\t// Handle division differently for increasing and decreasing increments in order to preserve the `:n + n: = :` identity and to satisfy user expectation that symmetry be maintained. The main issue being that, e.g., given a length 10 subsequence, `end/2` will yield `5`. Hence, `:end/2 + end/2: = :5 + :5 = :` (i.e., the first five elements (0,1,2,3,4) and the second five elements (5,6,7,8,9)); however, if increasing and decreasing are treated the same, `:end/2:-1 + end/2::-1 = :5:-1 + 5::-1 = :`, but the elements are not the same (i.e., the first elements (9,8,7,6) and the second elements (5,4,3,2,1)), due to the non-inclusive aspect of `j` in `i:j:k`. The slight adjustment (`len-1`) yields `:4:-1 + 4::-1 = :` and the slices (9,8,7,6,5) and (4,3,2,1,0), which better matches user expectation. For a length 11 subsequence, we get (0,1,2,3,4) and (5,6,7,8,9,10) for an increasing increment and (10,9,8,7,6) and (5,4,3,2,1,0), which seems fine given asymmetry in both cases.\n\t\tif ( decrement && len > 0 && v !== 1.0 ) { // note: avoid violating `end/1 = end` identity\n\t\t\treturn floor( (len-1) / v );\n\t\t}\n\t\treturn floor( len / v );\n\t}\n\t// The use of \"end\" includes invalid/unsupported operations...\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default resolveEnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Matches a character sequence for a colon separator used within a provided subsequence string.\n*\n* Regular expression: `\\s*:\\s*`\n*\n* -   `\\s*`\n*\n*     -   match zero or more whitespace characters\n*\n* -   `:`\n*\n*     -   match the colon character exactly\n*\n* -   `\\s*`\n*\n*     -   match zero or more whitespace characters\n*\n* ## Notes\n*\n* -   The regular expression allows for whitespace to surround the `:` character in subsequence strings (e.g., '2 : 4 : 1' vs '2:4:1').\n*\n* @private\n* @name RE_COLON_SEP\n* @type {RegExp}\n*\n* @example\n* var parts = ':'.split( RE_COLON_SEP );\n* // returns [ '', '' ]\n*\n* parts = ' : '.split( RE_COLON_SEP );\n* // returns [ '', '' ]\n*/\nvar RE_COLON_SEP = /\\s*:\\s*/;\n\n\n// EXPORTS //\n\nexport default RE_COLON_SEP;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Matches a character sequence for an integer value.\n*\n* Regular expression: `/^[-+]?\\d+$/`\n*\n* -   `^`\n*\n*     -   start of input\n*\n* -   `[-+]?`\n*\n*     -   match a minus or plus sign (if present)\n*\n* -   `\\d+`\n*\n*     -   match one or more digits\n*\n* -   `$`\n*\n*     -   end of input\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '123' );\n* // returns true\n*\n* bool = RE_INTEGER.test( '12.3' );\n* // returns false\n*/\nvar RE_INTEGER = /^[-+]?[0-9]+$/;\n\n\n// EXPORTS //\n\nexport default RE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Matches a character sequence which begins with 'end'.\n*\n* Regular expression: `/^end/`\n*\n* -   `^`\n*\n*     -   start of input\n*\n* -   `end`\n*\n*     -   match the character sequence 'end'\n*\n* @private\n* @name RE_END\n* @type {RegExp}\n*\n* @example\n* var bool = RE_END.test( 'end' );\n* // returns true\n*\n* bool = RE_END.test( 'foo end' );\n* // returns false\n*/\nvar RE_END = /^end/;\n\n\n// EXPORTS //\n\nexport default RE_END;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Slice from '@stdlib/slice-ctor';\nimport trim from '@stdlib/string-base-trim';\nimport resolveEnd from './resolve_end.js';\nimport RE_COLON_SEP from './re_colon_sep.js';\nimport RE_INTEGER from './re_integer.js';\nimport RE_END from './re_end.js';\nimport eInvalidSubsequence from './error_invalid_subsequence.js';\nimport eOutOfBounds from './error_out_of_bounds.js';\nimport eInvalidIncrement from './error_invalid_increment.js';\n\n\n// MAIN //\n\n/**\n* Converts a subsequence string to a Slice object.\n*\n* ## Notes\n*\n* -   A subsequence string has the following format:\n*\n*     ```text\n*     <start>:<stop>:<increment>\n*     ```\n*\n*     where\n*\n*     -   If an `increment` is not specified, the default increment is `1`. An increment of zero is **not** allowed.\n*     -   The `start` index is **inclusive**.\n*     -   The `stop` index is **exclusive**.\n*     -   Both `start` and `stop` indices are _optional_. If not provided, `start` and `stop` default to index extremes. Which extremes correspond to which index depends on whether the `increment` is positive or negative.\n*     -   Both `start` and `stop` can be negative; in which case, the corresponding index is resolved by subtracting the respective value from the provided length `len`.\n*     -   Both `start` and `stop` can use the `end` keyword (e.g., `end-2::2`, `end-3:`, etc), which supports basic subtraction and division.\n*     -   The `end` keyword resolves to the provided length `len`. Thus, `:-1` is equivalent to `:end-1`, `:-2` is equivalent to `:end-2`, and so on and so forth. The exception is when performing a division operation when the `increment` is less than zero; in which case, `end` is equal to `len-1` in order to preserve user expectations when `end/d` equals a whole number and slicing from right-to-left. The result from a division operation is **rounded down** to the nearest integer value.\n*\n* -   When `strict` is `false`, the resolved slice start is clamped to the slice index bounds (i.e., `[0, len)`).\n*\n* -   When `strict` is `false`, the resolved slice end is upper bound clamped to `len` (i.e., one greater than the last possible index).\n*\n* -   When the increment is negative, the resolved slice end value may be `null`, thus indicating that a non-empty slice should include the first index.\n*\n* -   The function ensures that results satisfy the convention that `:n` combined with `n:` is equivalent to `:` (i.e., selecting all elements).\n*\n* -   When `len` is zero, the function always returns a Slice object equivalent to `0:0:<increment>`.\n*\n* -   The function returns an error object if provided an invalid subsequence string.\n*\n* -   If `strict` is `true`, the function returns an error object if provided a subsequence string which exceeds index bounds.\n*\n* @param {string} str - input string\n* @param {NonNegativeInteger} len - maximum number of elements allowed in the slice\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {(Slice|Object)} Slice object or an error object\n*\n* @example\n* var s = seq2slice( '0:10:1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( '::-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 9\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( ':0:-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 9\n*\n* v = s.stop;\n* // returns 0\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( '4::-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 4\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( '::', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( ':end:', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( 'end::-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 9\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( 'end-2::-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 8\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( 'end/2::-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 4\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( 'end:end/2:-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 9\n*\n* v = s.stop;\n* // returns 4\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( ':end/2:-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 9\n*\n* v = s.stop;\n* // returns 4\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( ':end/2:1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 5\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( ':end/3', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 3\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( 'end/3::-1', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 3\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( 'end/3::', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 3\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( 'end/3::', 9, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 3\n*\n* v = s.stop;\n* // returns 9\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( 'end/3::-1', 9, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 2\n*\n* v = s.stop;\n* // returns null\n*\n* v = s.step;\n* // returns -1\n*\n* @example\n* var s = seq2slice( '5:5', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 5\n*\n* v = s.stop;\n* // returns 5\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( '5:5', 0, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 0\n*\n* v = s.stop;\n* // returns 0\n*\n* v = s.step;\n* // returns 1\n*\n* @example\n* var s = seq2slice( 'end:', 10, false );\n* // returns <Slice>\n*\n* var v = s.start;\n* // returns 10\n*\n* v = s.stop;\n* // returns 10\n*\n* v = s.step;\n* // returns 1\n*/\nfunction seq2slice( str, len, strict ) {\n\tvar parts;\n\tvar N;\n\tvar v;\n\n\tparts = trim( str ).split( RE_COLON_SEP );\n\tN = parts.length;\n\n\t// Disallow providing standalone components (e.g., '1', 'end', etc) and strings having too many components (e.g., '1:2:3:4')...\n\tif ( N < 2 || N > 3 ) {\n\t\treturn eInvalidSubsequence();\n\t}\n\n\t/* Increment */\n\n\t// Process the increment...\n\tif ( N === 3 ) {\n\t\tv = parts[ 2 ];\n\t\tif ( v.length === 0 ) { // empty increment\n\t\t\tparts[ 2 ] = 1; // default increment\n\t\t} else {\n\t\t\tif ( RE_INTEGER.test( v ) === false ) {\n\t\t\t\treturn eInvalidSubsequence();\n\t\t\t}\n\t\t\tv = parseInt( v, 10 );\n\t\t\tif ( v === 0 ) {\n\t\t\t\treturn eInvalidIncrement(); // increment cannot be zero\n\t\t\t}\n\t\t\tparts[ 2 ] = v;\n\t\t}\n\t} else {\n\t\tparts.push( 1 ); // default increment\n\t}\n\n\t/* Starting Index */\n\n\t// Process the starting index...\n\tv = parts[ 0 ];\n\n\t// Case: empty starting index\n\tif ( v.length === 0 ) {\n\t\t// If the increment is negative, we need to iterate from the last index...\n\t\tif ( parts[ 2 ] < 0 && len > 0 ) {\n\t\t\tparts[ 0 ] = len - 1;\n\t\t} else {\n\t\t\tparts[ 0 ] = 0; // default starting index (inclusive)\n\t\t}\n\t}\n\t// Case: use of the \"end\" keyword\n\telse if ( RE_END.test( v ) ) {\n\t\tv = resolveEnd( v, len, parts[ 2 ] < 0, strict );\n\t\tif ( v < 0 ) {\n\t\t\tif ( v === -2 ) {\n\t\t\t\treturn eOutOfBounds();\n\t\t\t}\n\t\t\treturn eInvalidSubsequence();\n\t\t}\n\t\tif ( parts[ 2 ] < 0 && v >= len ) {\n\t\t\tv -= 1; // clamp to the last index\n\t\t}\n\t\tparts[ 0 ] = v;\n\t}\n\t// Case: integer character sequence\n\telse if ( RE_INTEGER.test( v ) ) {\n\t\tv = parseInt( v, 10 );\n\n\t\t// Check whether we need to resolve the starting index relative to the last index...\n\t\tif ( v < 0 ) {\n\t\t\tv = len + v;\n\n\t\t\t// If the computed index exceeds the index bounds, clamp to the first index...\n\t\t\tif ( v < 0 ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t}\n\t\t\t\tv = 0;\n\t\t\t}\n\t\t}\n\t\t// If the index exceeds the index bounds, clamp to the starting index...\n\t\telse if ( v >= len ) {\n\t\t\tif ( strict ) {\n\t\t\t\treturn eOutOfBounds();\n\t\t\t}\n\t\t\t// If the increment is negative, clamp to the last index (inclusive)...\n\t\t\tif ( parts[ 2 ] < 0 ) {\n\t\t\t\tv = len - 1;\n\t\t\t}\n\t\t\t// If the increment is positive, clamp to the \"index\" following the last index...\n\t\t\telse {\n\t\t\t\tv = len;\n\t\t\t}\n\t\t}\n\t\tparts[ 0 ] = v;\n\t}\n\t// Case: invalid/unsupported characters/operations\n\telse {\n\t\treturn eInvalidSubsequence();\n\t}\n\n\t/* Ending Index */\n\n\t// Processing the ending index...\n\tv = parts[ 1 ];\n\n\t// Case: empty ending index\n\tif ( v.length === 0 ) {\n\t\t// If the increment is negative, we need to iterate toward the first index...\n\t\tif ( parts[ 2 ] < 0 ) {\n\t\t\tparts[ 1 ] = null;\n\t\t} else {\n\t\t\tparts[ 1 ] = len; // default ending index (exclusive)\n\t\t}\n\t}\n\t// Case: use of the \"end\" keyword\n\telse if ( RE_END.test( v ) ) {\n\t\tv = resolveEnd( v, len, parts[ 2 ] < 0, strict );\n\t\tif ( v < 0 ) {\n\t\t\tif ( v === -2 ) {\n\t\t\t\treturn eOutOfBounds();\n\t\t\t}\n\t\t\treturn eInvalidSubsequence();\n\t\t}\n\t\tparts[ 1 ] = v;\n\t}\n\t// Case: integer character sequence\n\telse if ( RE_INTEGER.test( v ) ) {\n\t\tv = parseInt( v, 10 );\n\n\t\t// Check whether we need to resolve the starting index relative to the last index...\n\t\tif ( v < 0 ) {\n\t\t\tv = len + v;\n\n\t\t\t// Check whether the computed index exceeds the index bounds...\n\t\t\tif ( v < 0 ) {\n\t\t\t\t// If the increment is positive, clamp the ending index to the first index (exclusive)...\n\t\t\t\tif ( parts[ 2 ] > 0 ) {\n\t\t\t\t\tif ( strict ) {\n\t\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t\t}\n\t\t\t\t\tv = 0;\n\t\t\t\t} else {\n\t\t\t\t\t// If the increment is negative, the ending index should resolve to the first index (inclusive)...\n\t\t\t\t\tif ( strict && v < -1 ) {\n\t\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t\t}\n\t\t\t\t\tv = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If the index exceeds the index bounds, clamp to the last \"index\" (exclusive)...\n\t\telse if ( v > len ) {\n\t\t\tif ( strict ) {\n\t\t\t\treturn eOutOfBounds();\n\t\t\t}\n\t\t\tv = len;\n\t\t}\n\t\tparts[ 1 ] = v;\n\t}\n\t// Case: invalid/unsupported characters/operations\n\telse {\n\t\treturn eInvalidSubsequence();\n\t}\n\n\t// Handle empty slice (note: this is at the end rather than at the beginning in order to ensure that `start` and `stop` are always validated)...\n\tif ( len === 0 ) {\n\t\treturn new Slice( 0, 0, parts[ 2 ] );\n\t}\n\n\treturn new Slice( parts[ 0 ], parts[ 1 ], parts[ 2 ] );\n}\n\n\n// EXPORTS //\n\nexport default seq2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for an invalid subsequence string.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_INVALID_SUBSEQUENCE'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a subsequence string containing a zero increment.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_INVALID_INCREMENT'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a subsequence string resolving to a slice which exceeds index bounds.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_OUT_OF_BOUNDS'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Matches a character sequence for a comma separator used to delineate subsequence strings.\n*\n* Regular expression: `\\s*,\\s*`\n*\n* -   `\\s*`\n*\n*     -   match zero or more whitespace characters\n*\n* -   `,`\n*\n*     -   match the comma character exactly\n*\n* -   `\\s*`\n*\n*     -   match zero or more whitespace characters\n*\n* ## Notes\n*\n* -   The regular expression allows for whitespace to surround the `,` character in multi-dimensional subsequence strings (e.g., '2:10 , 4:1 , ... , 1' vs '2:10,4:1,...,1').\n*\n* @private\n* @name RE_SUBSEQ_SEP\n* @type {RegExp}\n*\n* @example\n* var parts = ','.split( RE_SUBSEQ_SEP );\n* // returns [ '', '' ]\n*\n* parts = ' , '.split( RE_SUBSEQ_SEP );\n* // returns [ '', '' ]\n*/\nvar RE_SUBSEQ_SEP = /\\s*,\\s*/;\n\n\n// EXPORTS //\n\nexport default RE_SUBSEQ_SEP;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Matches a character sequence for an integer value.\n*\n* Regular expression: `/^[-+]?\\d+$/`\n*\n* -   `^`\n*\n*     -   start of input\n*\n* -   `[-+]?`\n*\n*     -   match a minus or plus sign (if present)\n*\n* -   `\\d+`\n*\n*     -   match one or more digits\n*\n* -   `$`\n*\n*     -   end of input\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '123' );\n* // returns true\n*\n* bool = RE_INTEGER.test( '12.3' );\n* // returns false\n*/\nvar RE_INTEGER = /^[-+]?[0-9]+$/;\n\n\n// EXPORTS //\n\nexport default RE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name args2multislice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/args2multislice}\n*/\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nsetReadOnly( ns, 'args2multislice', args2multislice );\n\n/**\n* @name int2slice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/int2slice}\n*/\nimport int2slice from '@stdlib/slice-base-int2slice';\nsetReadOnly( ns, 'int2slice', int2slice );\n\n/**\n* @name sliceLength\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/length}\n*/\nimport sliceLength from '@stdlib/slice-base-length';\nsetReadOnly( ns, 'sliceLength', sliceLength );\n\n/**\n* @name nonreducedDimensions\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/nonreduced-dimensions}\n*/\nimport nonreducedDimensions from '@stdlib/slice-base-nonreduced-dimensions';\nsetReadOnly( ns, 'nonreducedDimensions', nonreducedDimensions );\n\n/**\n* @name normalizeMultiSlice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/normalize-multi-slice}\n*/\nimport normalizeMultiSlice from '@stdlib/slice-base-normalize-multi-slice';\nsetReadOnly( ns, 'normalizeMultiSlice', normalizeMultiSlice );\n\n/**\n* @name normalizeSlice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/normalize-slice}\n*/\nimport normalizeSlice from '@stdlib/slice-base-normalize-slice';\nsetReadOnly( ns, 'normalizeSlice', normalizeSlice );\n\n/**\n* @name reducedDimensions\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/reduced-dimensions}\n*/\nimport reducedDimensions from '@stdlib/slice-base-reduced-dimensions';\nsetReadOnly( ns, 'reducedDimensions', reducedDimensions );\n\n/**\n* @name sargs2multislice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/sargs2multislice}\n*/\nimport sargs2multislice from '@stdlib/slice-base-sargs2multislice';\nsetReadOnly( ns, 'sargs2multislice', sargs2multislice );\n\n/**\n* @name seq2multislice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/seq2multislice}\n*/\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nsetReadOnly( ns, 'seq2multislice', seq2multislice );\n\n/**\n* @name seq2slice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/seq2slice}\n*/\nimport seq2slice from '@stdlib/slice-base-seq2slice';\nsetReadOnly( ns, 'seq2slice', seq2slice );\n\n/**\n* @name sliceShape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/shape}\n*/\nimport sliceShape from '@stdlib/slice-base-shape';\nsetReadOnly( ns, 'sliceShape', sliceShape );\n\n/**\n* @name slice2seq\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/slice2seq}\n*/\nimport slice2seq from '@stdlib/slice-base-slice2seq';\nsetReadOnly( ns, 'slice2seq', slice2seq );\n\n/**\n* @name str2multislice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/str2multislice}\n*/\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nsetReadOnly( ns, 'str2multislice', str2multislice );\n\n/**\n* @name str2slice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/slice/base/str2slice}\n*/\nimport str2slice from '@stdlib/slice-base-str2slice';\nsetReadOnly( ns, 'str2slice', str2slice );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a list of non-reduced dimensions in an un-normalized multi-slice.\n*\n* @param {MultiSlice} slice - input slice\n* @returns {NonNegativeIntegerArray} list of non-reduced dimensions\n*\n* @example\n* import MultiSlice from '@stdlib/slice-multi';\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = new MultiSlice( 1, null, 2, void 0, new Slice( 0, 10, 1 ) );\n* // returns <MultiSlice>\n*\n* var indices = nonreducedDimensions( s );\n* // returns [ 1, 3, 4 ]\n*/\nfunction nonreducedDimensions( slice ) {\n\tvar data;\n\tvar out;\n\tvar i;\n\n\tdata = slice.data;\n\tout = [];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tif ( typeof data[ i ] !== 'number' ) {\n\t\t\tout.push( i );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nonreducedDimensions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a list of reduced dimensions in an un-normalized multi-slice.\n*\n* @param {MultiSlice} slice - input slice\n* @returns {NonNegativeIntegerArray} list of reduced dimensions\n*\n* @example\n* import MultiSlice from '@stdlib/slice-multi';\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s = new MultiSlice( 1, null, 2, void 0, new Slice( 0, 10, 1 ) );\n* // returns <MultiSlice>\n*\n* var indices = reducedDimensions( s );\n* // returns [ 0, 2 ]\n*/\nfunction reducedDimensions( slice ) {\n\tvar data;\n\tvar out;\n\tvar i;\n\n\tdata = slice.data;\n\tout = [];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tif ( typeof data[ i ] === 'number' ) {\n\t\t\tout.push( i );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default reducedDimensions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-base-replace';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\n\n\n// MAIN //\n\n/**\n* Creates a MultiSlice object from a comma-separated list of string-serialized MultiSlice constructor arguments.\n*\n* @param {string} str - input string containing constructor arguments\n* @returns {(MultiSlice|null)} MultiSlice object (or null)\n*\n* @example\n* var s = sargs2multislice( ',Slice(0,10,1)' );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ null, <Slice> ]\n*\n* @example\n* var s = sargs2multislice( 'Slice(0,10,1),' );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ <Slice>, null ]\n*\n* @example\n* var s = sargs2multislice( 'Slice(0,10,1),,,Slice(0,10,1)' );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ <Slice>, null, null, <Slice> ]\n*\n* @example\n* var s = sargs2multislice( ',Slice(0,10,1),null,,Slice(2,9,2),null,' );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ null, <Slice>, null, null, <Slice>, null, null ]\n*/\nfunction sargs2multislice( str ) {\n\t// In order to support `x[ [...] ]` syntax, we need to touch up the serialized string due to how `undefined` is serialized...\n\tstr = replace( str, /^,/, 'null,' );        // leading comma (e.g., [ void 0, Slice(0,10,1) ] => ',Slice(0,10,1)')\n\tstr = replace( str, /,$/, ',null' );        // trailing comma (e.g., [ Slice(0,10,1), void 0 ] => 'Slice(0,10,1),')\n\tstr = replace( str, /,(?=,)/g, ',null' );   // between commas (e.g., [ Slice(0,10,1), void 0, void 0, Slice(0,10,1) ] => 'Slice(0,10,1),,,Slice(0,10,1)')\n\tstr = replace( str, /undefined/g, 'null' ); // account for the possibility that the input has been manually serialized\n\treturn str2multislice( 'MultiSlice(' + str + ')' );\n}\n\n\n// EXPORTS //\n\nexport default sargs2multislice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport Slice from '@stdlib/slice-ctor';\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nimport seq2slice from '@stdlib/slice-base-seq2slice';\nimport eInvalidEllipsis from './error_invalid_ellipsis.js';\nimport eInsufficientDimensions from './error_insufficient_dimensions.js';\nimport eTooManyDimensions from './error_too_many_dimensions.js';\nimport eOutOfBounds from './error_out_of_bounds.js';\nimport RE_SUBSEQ_SEP from './re_subseq_sep.js';\nimport RE_INTEGER from './re_integer.js';\n\n\n// MAIN //\n\n/**\n* Converts a multidimensional subsequence string to a MultiSlice object.\n*\n* ## Notes\n*\n* -   A multidimensional subsequence string is a comma-separated list of single-dimension indexing expressions (i.e., integers and/or subsequence strings). For example, the following\n*\n*     ```text\n*     2\n*     :\n*     2:\n*     :10\n*     2:10\n*     ::-1\n*     10:2:-1\n*     :2:\n*     2:10:\n*     2::2\n*     :10:2\n*     :, :, :\n*     1, 2, 3\n*     0:10, 1:20:2, ::-1\n*     ...\n*     :, ..., 2\n*     ```\n*\n*     are all valid multidimensional subsequence strings.\n*\n* -   Providing a single nonnegative integer `i` as a single-dimension index indexes the same elements as the subsequence `i:i+1`.\n*\n* -   Providing a single negative integer `i` as a single-dimension index indexes the same elements as the subsequence `n+i:n+i+i`, where `n` is the dimension size.\n*\n* -   While integers index the same elements as equivalent subsequences, providing an integer as a single-dimension index indicates to reduce the number of dimensions by one (e.g., if the provided shape corresponds to an array having rank `2`, then `rank(A)-1 == rank(A['0,:'])`). In contrast, providing a subsequence indicates to retain a respective dimension (e.g., if the provided shape corresponds to an array having rank `2`, then `rank(A) == rank(A[':,:'])`).\n*\n* -   A multidimensional subsequence string can only contain **one** ellipsis ('...') operator. An ellipsis indicates to apply `:` to each dimension necessary to index all dimensions (e.g., if `A` has rank `4`, `A['1:, ..., 2:5'] == A['1:, :, :, 2:5']`).\n*\n* -   Except in the case of providing a single ellipsis, the number of single-dimension indexing expressions must equal the number of dimensions in the input shape.\n*\n* -   The function returns an error object if provided an invalid subsequence string.\n*\n* -   If `strict` is `true`, the function returns an error object if a single-dimension index expression which exceeds index bounds.\n*\n* @param {string} str - input string\n* @param {NonNegativeIntegerArray} shape - maximum allowed slice shape\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {(MultiSlice|Object)} MultiSlice object or an error object\n*\n* @example\n* var s = seq2multislice( '0:10:2', [ 10 ], false );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ <Slice> ]\n*\n* var s0 = data[ 0 ];\n* // returns <Slice>\n*\n* var v = s0.start;\n* // returns 0\n*\n* v = s0.stop;\n* // returns 10\n*\n* v = s0.step;\n* // returns 2\n*\n* @example\n* var s = seq2multislice( 'end-3::-1', [ 10 ], false );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ <Slice> ]\n*\n* var s0 = data[ 0 ];\n* // returns <Slice>\n*\n* var v = s0.start;\n* // returns 7\n*\n* v = s0.stop;\n* // returns null\n*\n* v = s0.step;\n* // returns -1\n*\n* @example\n* var s = seq2multislice( '2,0:10:2,-4', [ 10, 10, 10 ], false );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ 2, <Slice>, -4 ]\n*\n* @example\n* var s = seq2multislice( '::-2,...,:', [ 10, 10, 10, 10, 10 ], false );\n* // returns <MultiSlice>\n*\n* var data = s.data;\n* // returns [ <Slice>, <Slice>, <Slice>, <Slice>, <Slice> ]\n*\n* var s1 = data[ 1 ];\n* // returns <Slice>\n*\n* var v = s1.start;\n* // returns 0\n*\n* v = s1.stop;\n* // returns 10\n*\n* v = s1.step;\n* // returns 1\n*/\nfunction seq2multislice( str, shape, strict ) {\n\tvar parts;\n\tvar args;\n\tvar FLG;\n\tvar len;\n\tvar N;\n\tvar M;\n\tvar s;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tN = shape.length;\n\n\tparts = trim( str ).split( RE_SUBSEQ_SEP );\n\tM = parts.length;\n\n\tFLG = false;\n\targs = [];\n\tj = 0; // dual pointer as `parts.length` may not equal `shape.length` due to the ellipsis operator\n\tfor ( i = 0; i < M; i++ ) {\n\t\ts = parts[ i ];\n\n\t\t// Case: ellipsis operator\n\t\tif ( s === '...' ) {\n\t\t\t// Only allow a single usage of the ellipsis operator...\n\t\t\tif ( FLG ) {\n\t\t\t\treturn eInvalidEllipsis();\n\t\t\t}\n\t\t\tFLG = true;\n\t\t\tfor ( k = 0; k < N-M+1; k++ ) {\n\t\t\t\targs.push( new Slice( 0, shape[ j ], 1 ) );\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tlen = shape[ j ];\n\n\t\t// Case: integer index\n\t\tif ( RE_INTEGER.test( s ) ) {\n\t\t\ts = parseInt( s, 10 );\n\t\t\tif ( strict ) {\n\t\t\t\tif ( s < 0 ) {\n\t\t\t\t\tif ( len + s < 0 ) {\n\t\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t\t}\n\t\t\t\t} else if ( s >= len ) {\n\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t}\n\t\t\t}\n\t\t\tj += 1;\n\t\t}\n\t\t// Case: subsequence\n\t\telse {\n\t\t\ts = seq2slice( s, len, strict );\n\t\t\tif ( s.code ) {\n\t\t\t\treturn s;\n\t\t\t}\n\t\t\tj += 1;\n\t\t}\n\t\targs.push( s );\n\t}\n\t// Verify that we've been provided the right number of slice dimensions...\n\tif ( args.length !== N ) {\n\t\tif ( args.length < N ) {\n\t\t\treturn eInsufficientDimensions();\n\t\t}\n\t\treturn eTooManyDimensions();\n\t}\n\treturn args2multislice( args );\n}\n\n\n// EXPORTS //\n\nexport default seq2multislice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a subsequence string resolving to a slice which exceeds index bounds.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_OUT_OF_BOUNDS'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a subsequence string containing an invalid use of ellipsis.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_INVALID_ELLIPSIS'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a subsequence string with insufficient dimensions.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_INSUFFICIENT_DIMENSIONS'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a subsequence string with too many dimensions.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default error;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sliceLength from '@stdlib/slice-base-length';\n\n\n// MAIN //\n\n/**\n* Returns the shape of a normalized multi-slice.\n*\n* @param {MultiSlice} slice - normalized MultiSlice object\n* @returns {NonNegativeIntegerArray} slice shape\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n* import normalizeMultiSlice from '@stdlib/slice-base-normalize-multi-slice';\n*\n* var s = new MultiSlice( new Slice( 2, null, 1 ), null, 10 );\n*\n* var v = sliceShape( normalizeMultiSlice( s, [ 10, 5, 20 ], false ) );\n* // returns [ 8, 5, 1 ]\n*\n* v = sliceShape( normalizeMultiSlice( s, [ 11, 3, 12 ], false ) );\n* // returns [ 9, 3, 1 ]\n*\n* v = sliceShape( normalizeMultiSlice( s, [ 5, 10, 15 ], false ) );\n* // returns [ 3, 10, 1 ]\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n* import normalizeMultiSlice from '@stdlib/slice-base-normalize-multi-slice';\n*\n* var s = new MultiSlice( null, new Slice( -1, 3, -2 ) );\n*\n* var v = sliceShape( normalizeMultiSlice( s, [ 10, 5 ], false ) );\n* // returns [ 10, 1 ]\n*\n* v = sliceShape( normalizeMultiSlice( s, [ 11, 10 ], false ) );\n* // returns [ 11, 3 ]\n*\n* v = sliceShape( normalizeMultiSlice( s, [ 5, 15 ], false ) );\n* // returns [ 5, 6 ]\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n* import normalizeMultiSlice from '@stdlib/slice-base-normalize-multi-slice';\n*\n* var s = new MultiSlice( 1, new Slice( 0, 0, 1 ) );\n*\n* var v = sliceShape( normalizeMultiSlice( s, [ 10, 5 ], false ) );\n* // returns [ 1, 0 ]\n*\n* v = sliceShape( normalizeMultiSlice( s, [ 11, 10 ], false ) );\n* // returns [ 1, 0 ]\n*\n* v = sliceShape( normalizeMultiSlice( s, [ 5, 15 ], false ) );\n* // returns [ 1, 0 ]\n*/\nfunction sliceShape( slice ) {\n\tvar data;\n\tvar out;\n\tvar i;\n\n\tdata = slice.data;\n\tout = [];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tout.push( sliceLength( data[ i ] ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sliceShape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a Slice object to a subsequence string.\n*\n* @param {Slice} slice - slice object\n* @returns {string} subsequence string\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var str = slice2seq( new Slice( null, null, null ) );\n* // returns ':'\n*\n* str = slice2seq( new Slice() );\n* // returns ':'\n*\n* str = slice2seq( new Slice( null ) );\n* // returns ':'\n*\n* str = slice2seq( new Slice( 10 ) );\n* // returns ':10'\n*\n* str = slice2seq( new Slice( -1 ) );\n* // returns ':-1'\n*\n* str = slice2seq( new Slice( 2, 10 ) );\n* // returns '2:10'\n*\n* str = slice2seq( new Slice( -2, 10 ) );\n* // returns '-2:10'\n*\n* str = slice2seq( new Slice( -2, -10 ) );\n* // returns '-2:-10'\n*\n* str = slice2seq( new Slice( 2, null ) );\n* // returns '2:'\n*\n* str = slice2seq( new Slice( null, 10 ) );\n* // returns ':10'\n*\n* str = slice2seq( new Slice( 2, 10, 2 ) );\n* // returns '2:10:2'\n*\n* str = slice2seq( new Slice( -1, null, -1 ) );\n* // returns '-1::-1'\n*\n* str = slice2seq( new Slice( -1, -5, -1 ) );\n* // returns '-1:-5:-1'\n*\n* str = slice2seq( new Slice( -1, 10, -1 ) );\n* // returns '-1:10:-1'\n*\n* str = slice2seq( new Slice( 1, -1, 2 ) );\n* // returns '1:-1:2'\n*\n* str = slice2seq( new Slice( null, null, -1 ) );\n* // returns '::-1'\n*/\nfunction slice2seq( slice ) {\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\ti = slice.start;\n\tj = slice.stop;\n\tk = slice.step;\n\n\tif ( i === null ) {\n\t\tout = '';\n\t} else {\n\t\tout = String( i );\n\t}\n\tif ( j === null ) {\n\t\tif ( k === null ) {\n\t\t\treturn out + ':';    // e.g., ':', '2:', '-1:'\n\t\t}\n\t\tif ( out === '' ) {\n\t\t\treturn '::' + k;     // e.g., '::2', '::-1'\n\t\t}\n\t\treturn out + '::' + k;   // e.g., '1::2', '10::-1'\n\t}\n\tout += ':' + j;\n\tif ( k === null ) {\n\t\treturn out;              // e.g., ':10', ':-1'\n\t}\n\treturn out + ':' + k;        // e.g., ':10:2', ':-1:-1', '1:10:2', '10:2:-1', '-1:-5:-1'\n}\n\n\n// EXPORTS //\n\nexport default slice2seq;\n"],"names":["main","Object","defineProperty","isNumber","value","zeros","n","i","out","zeroPad","str","width","right","negative","pad","length","startsWithMinus","substr","lowercase","String","prototype","toLowerCase","uppercase","toUpperCase","formatInteger","token","base","specifier","arg","parseInt","isFinite","Error","toString","precision","padRight","sign","alternate","call","charAt","abs","Math","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","digits","f","parseFloat","toExponential","toFixed","toPrecision","spaces","fromCharCode","isnan","isNaN","isArray","Array","initialize","flags","mapping","formatInterpolate","tokens","hasPeriod","flag","num","pos","j","TypeError","padZeros","indexOf","arguments","maxWidth","substring","RE","parse","match","formatTokenize","content","prev","exec","slice","lastIndex","push","format","args","tokenize","interpolate","apply","objectProtoype","toStr","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","defineProperty$1","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","__proto__","get","set","setReadOnly","configurable","enumerable","writable","setNonEnumerableReadOnly","setNonEnumerableReadOnlyAccessor","getter","FLG","Symbol","hasToStringTagSupport","toStringTag","has","hasOwnProperty","Sym","toStrTag","nativeClass","hasToStringTag","v","isOwn","tag","property","main$1","Number","test","isPrimitive","isObject","FLOAT64_PINF","POSITIVE_INFINITY","FLOAT64_NINF","NEGATIVE_INFINITY","floor","isInteger","PINF","NINF","x","isInt","valueOf","isNull","isUndefined","isValid","Slice","nargs","start","stop","step","this","RangeError","_start","_stop","_step","reFunctionName","type","data","RE_FUNCTION_NAME","REGEXP","isObjectLike","constructorName","name","ctor","constructor","_isBuffer","isBuffer","isSlice","MultiSlice","proxy","create","_data","args2multislice","int2slice","max","strict","code","predicate","len","arrayfun","join","toJSON","ceil","sliceLength","inc","x1","x2","normalizeSlice","normalize","search","newval","bool","trim","trim$1","HAS_BUILTIN","PREFIX","NARGS","RE_SEP","RE_INTEGER","str2slice","split","str2multislice","RE_END_MINUS","RE_END_DIVIDE","resolveEnd","decrement","tmp","RE_COLON_SEP","RE_END","seq2slice","parts","N","RE_SUBSEQ_SEP","ns","shape","s","M","k"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96]}